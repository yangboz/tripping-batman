<?xml version="1.0" encoding="utf-8"?>
<feathers:PanelScreen xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:feathers="feathers.controls.*" 
					  xmlns:layout="feathers.layout.*" xmlns:data="feathers.data.*"
					  addedToStage="panelscreen_addedToStageHandler(event)"
					  >

	<fx:Metadata>
		[Event(name="complete",type="starling.events.Event")]
	</fx:Metadata>

	<feathers:layout>
		<layout:VerticalLayout/>
	</feathers:layout>

	<feathers:headerProperties>
		<fx:Object title="Doodle">
			<fx:leftItems>
				<fx:Vector type="starling.display.DisplayObject">
					<feathers:Button label="Back" triggered="settingsButton_triggeredHandler(event)"/>
				</fx:Vector>
			</fx:leftItems>
			<fx:rightItems>
				<fx:Vector type="starling.display.DisplayObject">
					<feathers:Button label="Next" triggered="nextButton_triggeredHandler(event)"/>
				</fx:Vector>
			</fx:rightItems>
		</fx:Object>
	</feathers:headerProperties>

	<feathers:Panel width="600" height="600" backgroundSkin="{new Quad(100,100,0xFFFFFF)}">
		<feathers:ImageLoader source="assets/clothes_outline_512pxGREY.png" complete="imageloader_completeHandler(event)"/>
	</feathers:Panel>
	
	<feathers:Panel width="280" height="85">
		
	</feathers:Panel>
	<fx:Script><![CDATA[
		import assets.EmbedAssets;
		
		import feathers.examples.mxml.consts.GlobalConsts;
		import feathers.examples.mxml.consts.GlobalVariables;
		
		import starling.core.Starling;
		import starling.display.DisplayObject;
		import starling.display.Image;
		import starling.display.Quad;
		import starling.display.graphics.Fill;
		import starling.display.materials.StandardMaterial;
		import starling.display.shaders.fragment.TextureVertexColorFragmentShader;
		import starling.display.shaders.vertex.StandardVertexShader;
		import starling.events.Event;
		import starling.extensions.handlesheet.HandleSheet;
		import starling.extensions.handlesheet.HandleSheetConfig;
		import starling.textures.Texture;
		
		private function settingsButton_triggeredHandler(event:starling.events.Event):void
		{
			this.dispatchEventWith(starling.events.Event.COMPLETE);
		}
		
		private function nextButton_triggeredHandler(event:starling.events.Event):void
		{
			GlobalVariables.screenNavigator.showScreen(GlobalConsts.SCREEN_NAME_FILTERLIST);
		}
		
		private var imageHandleSheet:HandleSheet;
		protected function imageloader_completeHandler(event:starling.events.Event):void
		{
			var texture:Texture = Texture.fromEmbeddedAsset(EmbedAssets.IconWordpressTexture);
			var _contents:starling.display.Image = new Image(texture);
			var _conf:HandleSheetConfig = new HandleSheetConfig();
//			_conf.setCtrlButtonInitByTexture(_upTexture, _downTexture)
			_conf.dispatchEventBubbles = true;
			_conf.minSize = 0.5;
			_conf.lineColor = 0xFF0000;
			var hs:HandleSheet = new HandleSheet(_contents,_conf);
			hs.maxSize = 2;
			hs.minSize = 0.5;
			this.addChild(hs);
//			this.imageHandleSheet = new HandleSheet(event.target as starling.display.DisplayObject);			
//			this.addChild(this.imageHandleSheet);
		}
		
		[Embed( source = "/assets/Checker.png" )]
		private var CheckerBMP		:Class;
		
		private var currentPoint	:Point;
		private var prevPoint		:Point;
		private var distance		:Number;
		private var fill			:Fill;
		
		
		private function panelscreen_addedToStageHandler ( event:starling.events.Event ):void
		{
			fill = new Fill();
			fill.material = new StandardMaterial( new StandardVertexShader(), new TextureVertexColorFragmentShader() );
			fill.material.textures[0] = Texture.fromBitmap( new CheckerBMP(), false );
			addChild(fill);
			
			currentPoint = new Point();
			prevPoint = new Point();
			
			Starling.current.nativeStage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
		}
		
		private function mouseDownHandler( event:MouseEvent ):void
		{
			currentPoint.x =  Starling.current.nativeStage.mouseX;
			currentPoint.y =  Starling.current.nativeStage.mouseY;
			prevPoint.x = currentPoint.x;
			prevPoint.y = currentPoint.y;
			
			distance = 0;
			
			fill.clear();
			fill.addVertex( currentPoint.x, currentPoint.y );
			
			Starling.current.nativeStage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
			Starling.current.nativeStage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
		}
		
		private function mouseMoveHandler( event:MouseEvent ):void
		{
			currentPoint.x += (Starling.current.nativeStage.mouseX - currentPoint.x) * 1;
			currentPoint.y += (Starling.current.nativeStage.mouseY - currentPoint.y) * 1;
			
			var dx:Number = currentPoint.x - prevPoint.x;
			var dy:Number = currentPoint.y - prevPoint.y;
			var d:Number = Math.sqrt( dx * dx + dy * dy );
			
			if ( d > 5 )
			{
				distance += d;
				
				prevPoint.x = currentPoint.x;
				prevPoint.y = currentPoint.y;
				
				fill.addVertex( currentPoint.x, currentPoint.y );
			}
		}
		
		private function mouseUpHandler( event:MouseEvent ):void
		{
			Starling.current.nativeStage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
			Starling.current.nativeStage.removeEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
		}
		
		
	]]></fx:Script>
</feathers:PanelScreen>