<?xml version="1.0" encoding="utf-8"?>
<feathers:PanelScreen xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:feathers="feathers.controls.*" 
					  xmlns:layout="feathers.layout.*" xmlns:data="feathers.data.*" xmlns:model="feathers.examples.mxml.model.*"
					  >

	<fx:Metadata>
		[Event(name="complete",type="starling.events.Event")]
	</fx:Metadata>
	
	<!--
	<fx:Declarations>
		<model:PhotographViewModel id="model"/>
	</fx:Declarations>
	-->

	<feathers:layout>
		<layout:VerticalLayout/>
	</feathers:layout>

	<feathers:headerProperties>
		<fx:Object title="Photograph">
			<fx:leftItems>
				<fx:Vector type="starling.display.DisplayObject">
					<feathers:Button label="Back" triggered="settingsButton_triggeredHandler(event)"/>
				</fx:Vector>
			</fx:leftItems>
			<fx:rightItems>
				<fx:Vector type="starling.display.DisplayObject">
					<feathers:Slider visible="false"  maximum="500" minimum="1" name="name_slider"/>
					<feathers:Button label="Save" triggered="saveButton_triggeredHandler(event)"/>
				</fx:Vector>
			</fx:rightItems>
		</fx:Object>
	</feathers:headerProperties>
	
	<feathers:ImageLoader name="name_imageLoader" source="/assets/RayAllen.jpg"/>	
	<feathers:GroupedList change="groupList_changeHandler(event)" scrollBarDisplayMode="float"
						   dataProvider="{this.hierarchicalCollection}"
						   itemRendererFactory="{this.itemRendererFactory}"
						   >
		<feathers:layoutData>
			<layout:VerticalLayoutData percentWidth="200" percentHeight="80"/>
		</feathers:layoutData>
		</feathers:GroupedList>
	<feathers:List visible="false" change="list_changeHandler(event)" scrollBarDisplayMode="float">
		<feathers:layoutData>
			<layout:VerticalLayoutData percentWidth="200" percentHeight="80"/>
		</feathers:layoutData>
		<feathers:dataProvider>
			<data:ListCollection>
				<fx:Array>
					<fx:Object label="点状效果" filter="{new PixelateFilter(10)}"/>
					<fx:Object label="线条效果"/>
					<fx:Object label="泼墨效果"/>
					<fx:Object label="AnselFilter" filter="{new AnselFilter()}"/>
					<fx:Object label="BleachFilter" filter="{new BleachFilter()}"/>
					<fx:Object label="BloomFilter" filter="{new BloomFilter()}"/>
					<fx:Object label="ChromakeyFilter" filter="{new ChromakeyFilter()}"/>
					<fx:Object label="CrossHatchFilter" filter="{new CrossHatchFilter()}"/>
					<fx:Object label="FlashlightFilter" filter="{new FlashlightFilter()}"/>
					<fx:Object label="FreezFilter" filter="{new FreezFilter()}"/>
					<fx:Object label="GlassFilter" filter="{new GlassFilter()}"/>
					<fx:Object label="GodRaysFilter" filter="{new GodRaysFilter()}"/>
					<fx:Object label="LightStreakFilter" filter="{new LightStreakFilter()}"/>
					<fx:Object label="LineGlitchFilter" filter="{new LineGlitchFilter()}"/>
					<fx:Object label="LomoFilter" filter="{new LomoFilter()}"/>
					<fx:Object label="MotionBlurFilter" filter="{new LomoFilter()}"/>
					<fx:Object label="NewsprintFilter" filter="{new NewsprintFilter()}"/>
					<fx:Object label="NoiseFilter" filter="{new NoiseFilter()}"/>
					<fx:Object label="PixelateFilter" filter="{new PixelateFilter()}"/>
					<fx:Object label="PosterizeFilter" filter="{new PosterizeFilter()}"/>
					<fx:Object label="ScanlineFilter" filter="{new ScanlineFilter()}"/>
					<fx:Object label="ScratchedFilmFilter" filter="{new ScratchedFilmFilter()}"/>
					<fx:Object label="SineFilter" filter="{new SineFilter()}"/>
					<fx:Object label="SpotlightFilter" filter="{new SpotlightFilter()}"/>
					<fx:Object label="TiltShiftFilter" filter="{new TiltShiftFilter()}"/>
					<fx:Object label="ToyBlockFilter" filter="{new ToyBlockFilter()}"/>
					<fx:Object label="VCRFilter" filter="{new VCRFilter()}"/>
					<fx:Object label="VignetteFilter" filter="{new VignetteFilter()}"/>
					<fx:Object label="WrapFilter" filter="{new WarpFilter()}"/>
				</fx:Array>
			</data:ListCollection>
		</feathers:dataProvider>
		<feathers:itemRendererProperties>
			<fx:Object labelField="label"/>
		</feathers:itemRendererProperties>
	</feathers:List>
	

	<fx:Script><![CDATA[
		import feathers.controls.Slider;
		import feathers.controls.renderers.DefaultGroupedListItemRenderer;
		import feathers.controls.renderers.IGroupedListItemRenderer;
		import feathers.data.HierarchicalCollection;
		import feathers.examples.mxml.consts.GlobalConsts;
		import feathers.examples.mxml.utils.StarlingTools;
		
		import nid.image.encoder.PNGEncoder;
		
		import starling.display.DisplayObject;
		import starling.events.Event;
		import starling.filters.AnselFilter;
		import starling.filters.BleachFilter;
		import starling.filters.BloomFilter;
		import starling.filters.ChromakeyFilter;
		import starling.filters.CrossHatchFilter;
		import starling.filters.FlashlightFilter;
		import starling.filters.FragmentFilter;
		import starling.filters.FreezFilter;
		import starling.filters.GlassFilter;
		import starling.filters.GodRaysFilter;
		import starling.filters.LightStreakFilter;
		import starling.filters.LineGlitchFilter;
		import starling.filters.LomoFilter;
		import starling.filters.NewsprintFilter;
		import starling.filters.NoiseFilter;
		import starling.filters.PixelateFilter;
		import starling.filters.PosterizeFilter;
		import starling.filters.ScanlineFilter;
		import starling.filters.ScratchedFilmFilter;
		import starling.filters.SineFilter;
		import starling.filters.SpotlightFilter;
		import starling.filters.TiltShiftFilter;
		import starling.filters.ToyBlockFilter;
		import starling.filters.VCRFilter;
		import starling.filters.VignetteFilter;
		import starling.filters.WarpFilter;

		private function settingsButton_triggeredHandler(event:starling.events.Event):void
		{
			this.dispatchEventWith(starling.events.Event.COMPLETE);
		}
		private var selFilter:FragmentFilter; 
		protected function list_changeHandler(event:starling.events.Event):void
		{
			this.selFilter = (event.target as List).selectedItem.filter;		
			this.imageLoader.filter = null;
			this.imageLoader.filter = this.selFilter;
		}
		
		protected function groupList_changeHandler(event:starling.events.Event):void
		{
			this.selFilter = (event.target as GroupedList).selectedItem.filter;		
			this.imageLoader.filter = null;
			this.imageLoader.filter = this.selFilter;
		}
		
		private var hierarchicalCollection:HierarchicalCollection = new HierarchicalCollection(
			[
				{
					header: "点状效果",
					children:
					[
						{ text: "方角", filter: new PixelateFilter(5) },
						{ text: "圆角", filter: new ToyBlockFilter() }
					]
				}
			]	
		);
		
		private function itemRendererFactory():IGroupedListItemRenderer
		{
			var renderer:DefaultGroupedListItemRenderer = new DefaultGroupedListItemRenderer();
			renderer.labelField = "text";
//			renderer.iconSourceField = "thumbnail";
			return renderer;
		};
		
		private function saveButton_triggeredHandler(event:starling.events.Event):void
		{
			var stageBitmapData:BitmapData = new BitmapData(stage.width,stage.height);
			this.stage.drawToBitmapData(stageBitmapData,true);
//			var bitmap:Bitmap = StarlingTools.drawToBitmap(this.imageLoader);
			var bitmapData:BitmapData = StarlingTools.copyToBitmap(this.imageLoader,1.0);
//			bitmap.filters = [this.selFilter];
			var byteArray:ByteArray = PNGEncoder.encode(bitmapData,GlobalConsts.DPI_VALUE_DEFAULT);
//			var byteArray:ByteArray = PNGEncoder.encode(stageBitmapData,GlobalConsts.DPI_VALUE_DEFAULT);
			var fileReference:FileReference=new FileReference();
			fileReference.save(byteArray, ".png"); 
		}
		
		public function get imageLoader():ImageLoader{
			return (this.getChildByName("name_imageLoader") as ImageLoader);
		}
		
		public function get slider():Slider{
			return (this.getChildByName("name_slider") as Slider);
		}
	]]></fx:Script>
</feathers:PanelScreen>